{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId, Recognizer } from \"../../sdk/Exports\";\nimport { RecognitionMode, RecognizerConfig, TranscriberConnectionFactory, TranscriptionServiceRecognizer } from \"../Exports\";\nexport class TranscriberRecognizer extends Recognizer {\n  /**\n   * TranscriberRecognizer constructor.\n   * @constructor\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  constructor(speechTranslationConfig, audioConfig) {\n    const speechTranslationConfigImpl = speechTranslationConfig;\n    Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\n    Contracts.throwIfNullOrWhitespace(speechTranslationConfigImpl.speechRecognitionLanguage, PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\n    this.privDisposedRecognizer = false;\n  }\n\n  getConversationInfo() {\n    Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\n    return this.privConversation.conversationInfo;\n  }\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n\n  set conversation(c) {\n    Contracts.throwIfNullOrUndefined(c, \"Conversation\");\n    this.privConversation = c;\n  }\n\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n\n  get properties() {\n    return this.privProperties;\n  }\n\n  startContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n\n  stopContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.privDisposedRecognizer) {\n        yield this.dispose(true);\n      }\n    });\n  } // Push async join/leave conversation message via serviceRecognizer\n\n\n  pushConversationEvent(conversationInfo, command) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const reco = this.privReco;\n      Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\n      yield reco.sendSpeechEventAsync(conversationInfo, command);\n    });\n  }\n\n  connectCallbacks(transcriber) {\n    this.canceled = (s, e) => {\n      if (!!transcriber.canceled) {\n        transcriber.canceled(transcriber, e);\n      }\n    };\n\n    this.conversationCanceled = (s, e) => {\n      if (!!transcriber.conversationCanceled) {\n        transcriber.conversationCanceled(transcriber, e);\n      }\n    };\n\n    this.recognizing = (s, e) => {\n      if (!!transcriber.transcribing) {\n        transcriber.transcribing(transcriber, e);\n      }\n    };\n\n    this.recognized = (s, e) => {\n      if (!!transcriber.transcribed) {\n        transcriber.transcribed(transcriber, e);\n      }\n    };\n\n    this.conversationStarted = (s, e) => {\n      if (!!transcriber.conversationStarted) {\n        transcriber.conversationStarted(transcriber, e);\n      }\n    };\n\n    this.conversationStopped = (s, e) => {\n      if (!!transcriber.conversationStopped) {\n        transcriber.conversationStopped(transcriber, e);\n      }\n    };\n\n    this.sessionStarted = (s, e) => {\n      if (!!transcriber.sessionStarted) {\n        transcriber.sessionStarted(transcriber, e);\n      }\n    };\n\n    this.sessionStopped = (s, e) => {\n      if (!!transcriber.sessionStopped) {\n        transcriber.sessionStopped(transcriber, e);\n      }\n    };\n  }\n\n  disconnectCallbacks() {\n    this.canceled = undefined;\n    this.recognizing = undefined;\n    this.recognized = undefined;\n    this.sessionStarted = undefined;\n    this.sessionStopped = undefined;\n    this.conversationCanceled = undefined;\n    this.conversationStarted = undefined;\n    this.conversationStopped = undefined;\n  }\n  /**\n   * Disposes any resources held by the object.\n   * @member ConversationTranscriber.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - true if disposing the object.\n   */\n\n\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedRecognizer) {\n        return;\n      }\n\n      if (disposing) {\n        this.privDisposedRecognizer = true;\n        yield this.implRecognizerStop();\n      }\n\n      yield _super.dispose.call(this, disposing);\n    });\n  }\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.properties);\n  }\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const configImpl = audioConfig;\n    return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/emmanuelle.aboaf/Documents/GitHub/speech-to-text/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Transcription/TranscriberRecognizer.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","marshalPromiseToCallbacks","Contracts","PropertyId","Recognizer","RecognitionMode","RecognizerConfig","TranscriberConnectionFactory","TranscriptionServiceRecognizer","TranscriberRecognizer","constructor","speechTranslationConfig","audioConfig","speechTranslationConfigImpl","throwIfNull","throwIfNullOrWhitespace","speechRecognitionLanguage","SpeechServiceConnection_RecoLanguage","properties","privDisposedRecognizer","getConversationInfo","throwIfNullOrUndefined","privConversation","conversationInfo","authorizationToken","getProperty","SpeechServiceAuthorization_Token","token","setProperty","conversation","c","throwIfDisposed","privProperties","startContinuousRecognitionAsync","cb","err","startContinuousRecognitionAsyncImpl","Conversation","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","close","dispose","pushConversationEvent","command","reco","privReco","sendSpeechEventAsync","connectCallbacks","transcriber","canceled","s","conversationCanceled","recognizing","transcribing","recognized","transcribed","conversationStarted","conversationStopped","sessionStarted","sessionStopped","disconnectCallbacks","undefined","disposing","_super","Object","create","get","implRecognizerStop","call","createRecognizerConfig","speechConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","configImpl"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId, Recognizer, } from \"../../sdk/Exports\";\nimport { RecognitionMode, RecognizerConfig, TranscriberConnectionFactory, TranscriptionServiceRecognizer, } from \"../Exports\";\nexport class TranscriberRecognizer extends Recognizer {\n    /**\n     * TranscriberRecognizer constructor.\n     * @constructor\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n     */\n    constructor(speechTranslationConfig, audioConfig) {\n        const speechTranslationConfigImpl = speechTranslationConfig;\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\n        Contracts.throwIfNullOrWhitespace(speechTranslationConfigImpl.speechRecognitionLanguage, PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\n        this.privDisposedRecognizer = false;\n    }\n    getConversationInfo() {\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\n        return this.privConversation.conversationInfo;\n    }\n    get authorizationToken() {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n    set authorizationToken(token) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n    set conversation(c) {\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\n        this.privConversation = c;\n    }\n    get speechRecognitionLanguage() {\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n    get properties() {\n        return this.privProperties;\n    }\n    startContinuousRecognitionAsync(cb, err) {\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n    }\n    stopContinuousRecognitionAsync(cb, err) {\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n    }\n    close() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.privDisposedRecognizer) {\n                yield this.dispose(true);\n            }\n        });\n    }\n    // Push async join/leave conversation message via serviceRecognizer\n    pushConversationEvent(conversationInfo, command) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const reco = (this.privReco);\n            Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\n            yield reco.sendSpeechEventAsync(conversationInfo, command);\n        });\n    }\n    connectCallbacks(transcriber) {\n        this.canceled = (s, e) => {\n            if (!!transcriber.canceled) {\n                transcriber.canceled(transcriber, e);\n            }\n        };\n        this.conversationCanceled = (s, e) => {\n            if (!!transcriber.conversationCanceled) {\n                transcriber.conversationCanceled(transcriber, e);\n            }\n        };\n        this.recognizing = (s, e) => {\n            if (!!transcriber.transcribing) {\n                transcriber.transcribing(transcriber, e);\n            }\n        };\n        this.recognized = (s, e) => {\n            if (!!transcriber.transcribed) {\n                transcriber.transcribed(transcriber, e);\n            }\n        };\n        this.conversationStarted = (s, e) => {\n            if (!!transcriber.conversationStarted) {\n                transcriber.conversationStarted(transcriber, e);\n            }\n        };\n        this.conversationStopped = (s, e) => {\n            if (!!transcriber.conversationStopped) {\n                transcriber.conversationStopped(transcriber, e);\n            }\n        };\n        this.sessionStarted = (s, e) => {\n            if (!!transcriber.sessionStarted) {\n                transcriber.sessionStarted(transcriber, e);\n            }\n        };\n        this.sessionStopped = (s, e) => {\n            if (!!transcriber.sessionStopped) {\n                transcriber.sessionStopped(transcriber, e);\n            }\n        };\n    }\n    disconnectCallbacks() {\n        this.canceled = undefined;\n        this.recognizing = undefined;\n        this.recognized = undefined;\n        this.sessionStarted = undefined;\n        this.sessionStopped = undefined;\n        this.conversationCanceled = undefined;\n        this.conversationStarted = undefined;\n        this.conversationStopped = undefined;\n    }\n    /**\n     * Disposes any resources held by the object.\n     * @member ConversationTranscriber.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - true if disposing the object.\n     */\n    dispose(disposing) {\n        const _super = Object.create(null, {\n            dispose: { get: () => super.dispose }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.privDisposedRecognizer) {\n                return;\n            }\n            if (disposing) {\n                this.privDisposedRecognizer = true;\n                yield this.implRecognizerStop();\n            }\n            yield _super.dispose.call(this, disposing);\n        });\n    }\n    createRecognizerConfig(speechConfig) {\n        return new RecognizerConfig(speechConfig, this.properties);\n    }\n    createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n        const configImpl = audioConfig;\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, VoiceProfile, VoiceProfileEnrollmentResult, VoiceProfilePhraseResult, VoiceProfileResult, VoiceProfileType } from \"./Exports\";\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\n\nexport class VoiceProfileClient {\n  /**\n   * VoiceProfileClient constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n   */\n  constructor(speechConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implClientSetup();\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * The collection of properties and their values defined for this VoiceProfileClient.\n   * @member VoiceProfileClient.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.createProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n   *        specifies the keyword to be recognized.\n   * @param {string} lang Language string (locale) for Voice Profile\n   * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\n   */\n\n\n  createProfileAsync(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.createProfile(profileType, lang);\n\n      if (!result.ok) {\n        throw new Error(`createProfileAsync failed with code: ${result.status}, message: ${result.statusText}`);\n      }\n\n      const response = result.json;\n      const profile = new VoiceProfile(response.profileId, profileType);\n      return profile;\n    });\n  }\n  /**\n   * Get current information of a voice profile\n   * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to retrieve info for\n   * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n   */\n\n\n  retrieveEnrollmentResultAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getProfileStatus(profile);\n      return new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n    });\n  }\n  /**\n   * Get all voice profiles on account with given voice profile type\n   * @member VoiceProfileClient.prototype.getAllProfilesAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\n   * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\n   */\n\n\n  getAllProfilesAsync(profileType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getProfiles(profileType);\n\n      if (profileType === VoiceProfileType.TextIndependentIdentification) {\n        return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\n      }\n\n      return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\n    });\n  }\n  /**\n   * Get valid authorization phrases for voice profile enrollment\n   * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\n   * @param {string} lang Language string (locale) for Voice Profile\n   */\n\n\n  getActivationPhrasesAsync(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getPhrases(profileType, lang);\n      return new VoiceProfilePhraseResult(result.ok ? ResultReason.EnrollingVoiceProfile : ResultReason.Canceled, result.statusText, result.json);\n    });\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.enrollProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to create enrollment for\n   * @param {AudioConfig} audioConfig source info from which to create enrollment\n   * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n   */\n\n\n  enrollProfileAsync(profile, audioConfig) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const configImpl = audioConfig;\n      Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n      const result = yield this.privAdapter.createEnrollment(profile, configImpl);\n      return new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n    });\n  }\n  /**\n   * Delete a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.deleteProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to be deleted\n   * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n   */\n\n\n  deleteProfileAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.deleteProfile(profile);\n      return this.getResult(result, ResultReason.DeletedVoiceProfile);\n    });\n  }\n  /**\n   * Remove all enrollments for a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.resetProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to be reset\n   * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n   */\n\n\n  resetProfileAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.resetProfile(profile);\n      return this.getResult(result, ResultReason.ResetVoiceProfile);\n    });\n  }\n  /**\n   * Included for compatibility\n   * @member VoiceProfileClient.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    return;\n  } // Does class setup, swiped from Recognizer.\n\n\n  implClientSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    const recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n    this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n  }\n\n  getResult(result, successReason, cb) {\n    const response = new VoiceProfileResult(result.ok ? successReason : ResultReason.Canceled, result.statusText);\n    return response;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/emmanuelle.aboaf/Documents/GitHub/speech-to-text/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/VoiceProfileClient.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Context","OS","SpeakerIdMessageAdapter","SpeakerRecognitionConfig","Contracts","PropertyId","ResultReason","VoiceProfile","VoiceProfileEnrollmentResult","VoiceProfilePhraseResult","VoiceProfileResult","VoiceProfileType","VoiceProfileClient","constructor","speechConfig","speechConfigImpl","throwIfNull","privProperties","properties","clone","implClientSetup","authorizationToken","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","createProfileAsync","profileType","lang","privAdapter","createProfile","ok","Error","status","statusText","response","json","profile","profileId","retrieveEnrollmentResultAsync","getProfileStatus","EnrolledVoiceProfile","Canceled","data","getAllProfilesAsync","getProfiles","TextIndependentIdentification","FromIdentificationProfileList","FromVerificationProfileList","getActivationPhrasesAsync","getPhrases","EnrollingVoiceProfile","enrollProfileAsync","audioConfig","configImpl","throwIfNullOrUndefined","createEnrollment","deleteProfileAsync","deleteProfile","getResult","DeletedVoiceProfile","resetProfileAsync","resetProfile","ResetVoiceProfile","close","osPlatform","window","osName","osVersion","navigator","platform","userAgent","appVersion","recognizerConfig","successReason","cb"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig, } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, VoiceProfile, VoiceProfileEnrollmentResult, VoiceProfilePhraseResult, VoiceProfileResult, VoiceProfileType, } from \"./Exports\";\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\nexport class VoiceProfileClient {\n    /**\n     * VoiceProfileClient constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n     */\n    constructor(speechConfig) {\n        const speechConfigImpl = speechConfig;\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n        this.privProperties = speechConfigImpl.properties.clone();\n        this.implClientSetup();\n    }\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member VoiceProfileClient.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get authorizationToken() {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member VoiceProfileClient.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    set authorizationToken(token) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n    /**\n     * The collection of properties and their values defined for this VoiceProfileClient.\n     * @member VoiceProfileClient.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n     */\n    get properties() {\n        return this.privProperties;\n    }\n    /**\n     * Create a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.createProfileAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n     *        specifies the keyword to be recognized.\n     * @param {string} lang Language string (locale) for Voice Profile\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\n     */\n    createProfileAsync(profileType, lang) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.privAdapter.createProfile(profileType, lang);\n            if (!result.ok) {\n                throw new Error(`createProfileAsync failed with code: ${result.status}, message: ${result.statusText}`);\n            }\n            const response = result.json;\n            const profile = new VoiceProfile(response.profileId, profileType);\n            return profile;\n        });\n    }\n    /**\n     * Get current information of a voice profile\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n     */\n    retrieveEnrollmentResultAsync(profile) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.privAdapter.getProfileStatus(profile);\n            return new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n        });\n    }\n    /**\n     * Get all voice profiles on account with given voice profile type\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\n     */\n    getAllProfilesAsync(profileType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.privAdapter.getProfiles(profileType);\n            if (profileType === VoiceProfileType.TextIndependentIdentification) {\n                return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\n            }\n            return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\n        });\n    }\n    /**\n     * Get valid authorization phrases for voice profile enrollment\n     * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\n     * @param {string} lang Language string (locale) for Voice Profile\n     */\n    getActivationPhrasesAsync(profileType, lang) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.privAdapter.getPhrases(profileType, lang);\n            return new VoiceProfilePhraseResult(result.ok ? ResultReason.EnrollingVoiceProfile : ResultReason.Canceled, result.statusText, result.json);\n        });\n    }\n    /**\n     * Create a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n     */\n    enrollProfileAsync(profile, audioConfig) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const configImpl = audioConfig;\n            Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n            const result = yield this.privAdapter.createEnrollment(profile, configImpl);\n            return new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n        });\n    }\n    /**\n     * Delete a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfile} profile Voice Profile to be deleted\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n     */\n    deleteProfileAsync(profile) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.privAdapter.deleteProfile(profile);\n            return this.getResult(result, ResultReason.DeletedVoiceProfile);\n        });\n    }\n    /**\n     * Remove all enrollments for a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.resetProfileAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfile} profile Voice Profile to be reset\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n     */\n    resetProfileAsync(profile) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.privAdapter.resetProfile(profile);\n            return this.getResult(result, ResultReason.ResetVoiceProfile);\n        });\n    }\n    /**\n     * Included for compatibility\n     * @member VoiceProfileClient.prototype.close\n     * @function\n     * @public\n     */\n    close() {\n        return;\n    }\n    // Does class setup, swiped from Recognizer.\n    implClientSetup() {\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\n        let osName = \"unknown\";\n        let osVersion = \"unknown\";\n        if (typeof navigator !== \"undefined\") {\n            osPlatform = osPlatform + \"/\" + navigator.platform;\n            osName = navigator.userAgent;\n            osVersion = navigator.appVersion;\n        }\n        const recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n    }\n    getResult(result, successReason, cb) {\n        const response = new VoiceProfileResult(result.ok ? successReason : ResultReason.Canceled, result.statusText);\n        return (response);\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}
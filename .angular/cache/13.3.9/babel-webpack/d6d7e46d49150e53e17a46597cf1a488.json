{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, SpeakerIdentificationModel, SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerVerificationModel } from \"./Exports\";\n/**\n * Defines SpeakerRecognizer class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class SpeakerRecognizer\n */\n\nexport class SpeakerRecognizer {\n  /**\n   * SpeakerRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\n   */\n  constructor(speechConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privAudioConfigImpl = audioConfig;\n    Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implSRSetup();\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member SpeakerRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member SpeakerRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * The collection of properties and their values defined for this SpeakerRecognizer.\n   * @member SpeakerRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Get recognition result for model using given audio\n   * @member SpeakerRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @async\n   * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\n   * @param cb - Callback invoked once result is returned.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  recognizeOnceAsync(model) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (model instanceof SpeakerIdentificationModel) {\n        const responsePromise = this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl);\n        return this.getResult(responsePromise, SpeakerRecognitionResultType.Identify, undefined);\n      } else if (model instanceof SpeakerVerificationModel) {\n        const responsePromise = this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl);\n        return this.getResult(responsePromise, SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId);\n      } else {\n        throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\n      }\n    });\n  }\n  /**\n   * Included for compatibility\n   * @member SpeakerRecognizer.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close() {\n    return;\n  } // Does class setup, swiped from Recognizer.\n\n\n  implSRSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    const recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n    this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n  }\n\n  getResult(responsePromise, resultType, profileId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield responsePromise;\n      return new SpeakerRecognitionResult(resultType, response.data, profileId, response.ok ? ResultReason.RecognizedSpeaker : ResultReason.Canceled);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/emmanuelle.aboaf/Documents/GitHub/speech-to-text/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeakerRecognizer.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Context","OS","SpeakerIdMessageAdapter","SpeakerRecognitionConfig","Contracts","PropertyId","ResultReason","SpeakerIdentificationModel","SpeakerRecognitionResult","SpeakerRecognitionResultType","SpeakerVerificationModel","SpeakerRecognizer","constructor","speechConfig","audioConfig","speechConfigImpl","throwIfNull","privAudioConfigImpl","privProperties","properties","clone","implSRSetup","authorizationToken","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","recognizeOnceAsync","model","responsePromise","privAdapter","identifySpeaker","getResult","Identify","undefined","verifySpeaker","Verify","voiceProfile","profileId","Error","close","osPlatform","window","osName","osVersion","navigator","platform","userAgent","appVersion","recognizerConfig","resultType","response","data","ok","RecognizedSpeaker","Canceled"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig, } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, SpeakerIdentificationModel, SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerVerificationModel, } from \"./Exports\";\n/**\n * Defines SpeakerRecognizer class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class SpeakerRecognizer\n */\nexport class SpeakerRecognizer {\n    /**\n     * SpeakerRecognizer constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\n     */\n    constructor(speechConfig, audioConfig) {\n        const speechConfigImpl = speechConfig;\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n        this.privAudioConfigImpl = audioConfig;\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\n        this.privProperties = speechConfigImpl.properties.clone();\n        this.implSRSetup();\n    }\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member SpeakerRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    get authorizationToken() {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member SpeakerRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    set authorizationToken(token) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n    /**\n     * The collection of properties and their values defined for this SpeakerRecognizer.\n     * @member SpeakerRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\n     */\n    get properties() {\n        return this.privProperties;\n    }\n    /**\n     * Get recognition result for model using given audio\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @async\n     * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\n     * @param cb - Callback invoked once result is returned.\n     * @param err - Callback invoked in case of an error.\n     */\n    recognizeOnceAsync(model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (model instanceof SpeakerIdentificationModel) {\n                const responsePromise = this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl);\n                return this.getResult(responsePromise, SpeakerRecognitionResultType.Identify, undefined);\n            }\n            else if (model instanceof SpeakerVerificationModel) {\n                const responsePromise = this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl);\n                return this.getResult(responsePromise, SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId);\n            }\n            else {\n                throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\n            }\n        });\n    }\n    /**\n     * Included for compatibility\n     * @member SpeakerRecognizer.prototype.close\n     * @function\n     * @public\n     */\n    close() {\n        return;\n    }\n    // Does class setup, swiped from Recognizer.\n    implSRSetup() {\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\n        let osName = \"unknown\";\n        let osVersion = \"unknown\";\n        if (typeof navigator !== \"undefined\") {\n            osPlatform = osPlatform + \"/\" + navigator.platform;\n            osName = navigator.userAgent;\n            osVersion = navigator.appVersion;\n        }\n        const recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n    }\n    getResult(responsePromise, resultType, profileId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield responsePromise;\n            return new SpeakerRecognitionResult(resultType, response.data, profileId, response.ok ? ResultReason.RecognizedSpeaker : ResultReason.Canceled);\n        });\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}
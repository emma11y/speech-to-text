{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as tls from \"tls\";\nimport * as parse from \"url-parse\";\nimport * as ocsp from \"../../external/ocsp/ocsp\";\nimport { Events, OCSPCacheEntryExpiredEvent, OCSPCacheEntryNeedsRefreshEvent, OCSPCacheFetchErrorEvent, OCSPCacheHitEvent, OCSPCacheMissEvent, OCSPCacheUpdatehCompleteEvent, OCSPCacheUpdateNeededEvent, OCSPDiskCacheHitEvent, OCSPDiskCacheStoreEvent, OCSPMemoryCacheHitEvent, OCSPMemoryCacheStoreEvent, OCSPResponseRetrievedEvent, OCSPStapleReceivedEvent, OCSPVerificationFailedEvent } from \"../common/Exports\";\nimport Agent from \"agent-base\"; // @ts-ignore\n\nimport Cache from \"async-disk-cache\";\nimport HttpsProxyAgent from \"https-proxy-agent\";\nimport * as net from \"net\";\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\nexport class CertCheckAgent {\n  constructor(proxyInfo) {\n    if (!!proxyInfo) {\n      this.privProxyInfo = proxyInfo;\n    } // Initialize this here to allow tests to set the env variable before the cache is constructed.\n\n\n    if (!CertCheckAgent.privDiskCache) {\n      CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", {\n        supportBuffer: true,\n        location: typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined\n      });\n    }\n  } // Test hook to force the disk cache to be recreated.\n\n\n  static forceReinitDiskCache() {\n    CertCheckAgent.privDiskCache = undefined;\n    CertCheckAgent.privMemCache = {};\n  }\n\n  GetAgent(disableStapling) {\n    const agent = new Agent.Agent(this.CreateConnection);\n\n    if (this.privProxyInfo !== undefined && this.privProxyInfo.HostName !== undefined && this.privProxyInfo.Port > 0) {\n      const proxyName = \"privProxyInfo\";\n      agent[proxyName] = this.privProxyInfo;\n    }\n\n    return agent;\n  }\n\n  static GetProxyAgent(proxyInfo) {\n    const httpProxyOptions = {\n      host: proxyInfo.HostName,\n      port: proxyInfo.Port\n    };\n\n    if (!!proxyInfo.UserName) {\n      httpProxyOptions.headers = {\n        \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\")\n      };\n    } else {\n      httpProxyOptions.headers = {};\n    }\n\n    httpProxyOptions.headers.requestOCSP = \"true\";\n    const httpProxyAgent = new HttpsProxyAgent(httpProxyOptions);\n    return httpProxyAgent;\n  }\n\n  static OCSPCheck(socketPromise, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let ocspRequest;\n      let stapling;\n      let resolved = false;\n      const socket = yield socketPromise;\n      socket.cork();\n      const tlsSocket = socket;\n      return new Promise((resolve, reject) => {\n        socket.on(\"OCSPResponse\", data => {\n          if (!!data) {\n            this.onEvent(new OCSPStapleReceivedEvent());\n            stapling = data;\n          }\n        });\n        socket.on(\"error\", error => {\n          if (!resolved) {\n            resolved = true;\n            socket.destroy();\n            reject(error);\n          }\n        });\n        tlsSocket.on(\"secure\", () => __awaiter(this, void 0, void 0, function* () {\n          const peer = tlsSocket.getPeerCertificate(true);\n\n          try {\n            const issuer = yield this.GetIssuer(peer); // We always need a request to verify the response.\n\n            ocspRequest = ocsp.request.generate(peer.raw, issuer.raw); // Do we have a result for this certificate in our memory cache?\n\n            const sig = ocspRequest.id.toString(\"hex\"); // Stapled response trumps cached response.\n\n            if (!stapling) {\n              const cacheEntry = yield CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\n              stapling = cacheEntry;\n            }\n\n            yield this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\n            socket.uncork();\n            resolved = true;\n            resolve(socket);\n          } catch (e) {\n            socket.destroy();\n            resolved = true;\n            reject(e);\n          }\n        }));\n      });\n    });\n  }\n\n  static GetIssuer(peer) {\n    if (peer.issuerCertificate) {\n      return Promise.resolve(peer.issuerCertificate);\n    }\n\n    return new Promise((resolve, reject) => {\n      const ocspAgent = new ocsp.Agent({});\n      ocspAgent.fetchIssuer(peer, null, (error, value) => {\n        if (!!error) {\n          reject(error);\n          return;\n        }\n\n        resolve(value);\n      });\n    });\n  }\n\n  static GetResponseFromCache(signature, ocspRequest, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let cachedResponse = CertCheckAgent.privMemCache[signature];\n\n      if (!!cachedResponse) {\n        this.onEvent(new OCSPMemoryCacheHitEvent(signature));\n      } // Do we have a result for this certificate on disk in %TMP%?\n\n\n      if (!cachedResponse) {\n        try {\n          const diskCacheResponse = yield CertCheckAgent.privDiskCache.get(signature);\n\n          if (!!diskCacheResponse.isCached) {\n            CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\n            CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\n            cachedResponse = diskCacheResponse.value;\n          }\n        } catch (error) {\n          cachedResponse = null;\n        }\n      }\n\n      if (!cachedResponse) {\n        return cachedResponse;\n      }\n\n      try {\n        const cachedOcspResponse = ocsp.utils.parseResponse(cachedResponse);\n        const tbsData = cachedOcspResponse.value.tbsResponseData;\n\n        if (tbsData.responses.length < 1) {\n          this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\n          return;\n        }\n\n        const cachedStartTime = tbsData.responses[0].thisUpdate;\n        const cachedNextTime = tbsData.responses[0].nextUpdate;\n\n        if (cachedNextTime < Date.now() + this.testTimeOffset - 60000) {\n          // Cached entry has expired.\n          this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\n          cachedResponse = null;\n        } else {\n          // If we're within one day of the next update, or 50% of the way through the validity period,\n          // background an update to the cache.\n          const minUpdate = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\n\n          if (cachedNextTime - (Date.now() + this.testTimeOffset) < minUpdate) {\n            this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\n            this.UpdateCache(ocspRequest, proxyInfo).catch(error => {\n              // Well, not much we can do here.\n              this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\n            });\n          } else {\n            this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\n          }\n        }\n      } catch (error) {\n        this.onEvent(new OCSPCacheFetchErrorEvent(signature, error));\n        cachedResponse = null;\n      }\n\n      if (!cachedResponse) {\n        this.onEvent(new OCSPCacheMissEvent(signature));\n      }\n\n      return cachedResponse;\n    });\n  }\n\n  static VerifyOCSPResponse(cacheValue, ocspRequest, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let ocspResponse = cacheValue;\n      const sig = ocspRequest.certID.toString(\"hex\"); // Do we have a valid response?\n\n      if (!ocspResponse) {\n        ocspResponse = yield CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\n      }\n\n      return new Promise((resolve, reject) => {\n        ocsp.verify({\n          request: ocspRequest,\n          response: ocspResponse\n        }, (error, result) => {\n          if (!!error) {\n            CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error)); // Bad Cached Value? One more try without the cache.\n\n            if (!!cacheValue) {\n              this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(() => {\n                resolve();\n              }, error => {\n                reject(error);\n              });\n            } else {\n              reject(error);\n            }\n          } else {\n            if (!cacheValue) {\n              CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\n            }\n\n            resolve();\n          }\n        });\n      });\n    });\n  }\n\n  static UpdateCache(req, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signature = req.id.toString(\"hex\");\n      this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\n      const rawResponse = yield this.GetOCSPResponse(req, proxyInfo);\n      this.StoreCacheEntry(signature, rawResponse);\n      this.onEvent(new OCSPCacheUpdatehCompleteEvent(req.id.toString(\"hex\")));\n    });\n  }\n\n  static StoreCacheEntry(sig, rawResponse) {\n    this.StoreMemoryCacheEntry(sig, rawResponse);\n    this.StoreDiskCacheEntry(sig, rawResponse);\n  }\n\n  static StoreMemoryCacheEntry(sig, rawResponse) {\n    this.privMemCache[sig] = rawResponse;\n    this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\n  }\n\n  static StoreDiskCacheEntry(sig, rawResponse) {\n    this.privDiskCache.set(sig, rawResponse).then(() => {\n      this.onEvent(new OCSPDiskCacheStoreEvent(sig));\n    });\n  }\n\n  static GetOCSPResponse(req, proxyInfo) {\n    const ocspMethod = \"1.3.6.1.5.5.7.48.1\";\n    let options = {};\n\n    if (!!proxyInfo) {\n      const agent = CertCheckAgent.GetProxyAgent(proxyInfo);\n      options.agent = agent;\n    }\n\n    return new Promise((resolve, reject) => {\n      ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, (error, uri) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        const parsedUri = parse.default(uri);\n        parsedUri.path = parsedUri.pathname;\n        options = Object.assign(Object.assign({}, options), parsedUri);\n        ocsp.utils.getResponse(options, req.data, (error, raw) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          this.onEvent(new OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\n          resolve(raw);\n        });\n      });\n    });\n  }\n\n  CreateConnection(request, options) {\n    const enableOCSP = typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\" && options.secureEndpoint;\n    let socketPromise;\n    options = Object.assign(Object.assign({}, options), {\n      requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\n      servername: options.host\n    });\n\n    if (!!this.privProxyInfo) {\n      const httpProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\n      const baseAgent = httpProxyAgent;\n      socketPromise = new Promise((resolve, reject) => {\n        baseAgent.callback(request, options, (error, socket) => {\n          if (!!error) {\n            reject(error);\n          } else {\n            resolve(socket);\n          }\n        });\n      });\n    } else {\n      if (!!options.secureEndpoint) {\n        socketPromise = Promise.resolve(tls.connect(options));\n      } else {\n        socketPromise = Promise.resolve(net.connect(options));\n      }\n    }\n\n    if (!!enableOCSP) {\n      return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\n    } else {\n      return socketPromise;\n    }\n  }\n\n} // Test hook to enable forcing expiration / refresh to happen.\n\nCertCheckAgent.testTimeOffset = 0; // Test hook to disable stapling for cache testing.\n\nCertCheckAgent.forceDisableOCSPStapling = false; // An in memory cache for recived responses.\n\nCertCheckAgent.privMemCache = {};\n\nCertCheckAgent.onEvent = event => {\n  Events.instance.onEvent(event);\n};","map":{"version":3,"sources":["C:/Users/emmanuelle.aboaf/Documents/GitHub/speech-to-text/node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/CertChecks.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","tls","parse","ocsp","Events","OCSPCacheEntryExpiredEvent","OCSPCacheEntryNeedsRefreshEvent","OCSPCacheFetchErrorEvent","OCSPCacheHitEvent","OCSPCacheMissEvent","OCSPCacheUpdatehCompleteEvent","OCSPCacheUpdateNeededEvent","OCSPDiskCacheHitEvent","OCSPDiskCacheStoreEvent","OCSPMemoryCacheHitEvent","OCSPMemoryCacheStoreEvent","OCSPResponseRetrievedEvent","OCSPStapleReceivedEvent","OCSPVerificationFailedEvent","Agent","Cache","HttpsProxyAgent","net","OCSPCacheUpdateErrorEvent","CertCheckAgent","constructor","proxyInfo","privProxyInfo","privDiskCache","supportBuffer","location","process","env","SPEECH_OCSP_CACHE_ROOT","undefined","forceReinitDiskCache","privMemCache","GetAgent","disableStapling","agent","CreateConnection","HostName","Port","proxyName","GetProxyAgent","httpProxyOptions","host","port","UserName","headers","Buffer","Password","toString","requestOCSP","httpProxyAgent","OCSPCheck","socketPromise","ocspRequest","stapling","resolved","socket","cork","tlsSocket","on","data","onEvent","error","destroy","peer","getPeerCertificate","issuer","GetIssuer","request","generate","raw","sig","id","cacheEntry","GetResponseFromCache","VerifyOCSPResponse","uncork","issuerCertificate","ocspAgent","fetchIssuer","signature","cachedResponse","diskCacheResponse","get","isCached","StoreMemoryCacheEntry","cachedOcspResponse","utils","parseResponse","tbsData","tbsResponseData","responses","length","cachedStartTime","thisUpdate","cachedNextTime","nextUpdate","Date","now","testTimeOffset","minUpdate","Math","min","UpdateCache","catch","cacheValue","ocspResponse","certID","GetOCSPResponse","verify","response","StoreCacheEntry","req","rawResponse","StoreDiskCacheEntry","set","ocspMethod","options","getAuthorityInfo","cert","uri","parsedUri","default","path","pathname","Object","assign","getResponse","enableOCSP","NODE_TLS_REJECT_UNAUTHORIZED","SPEECH_CONDUCT_OCSP_CHECK","secureEndpoint","forceDisableOCSPStapling","servername","baseAgent","callback","connect","event","instance"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as tls from \"tls\";\nimport * as parse from \"url-parse\";\nimport * as ocsp from \"../../external/ocsp/ocsp\";\nimport { Events, OCSPCacheEntryExpiredEvent, OCSPCacheEntryNeedsRefreshEvent, OCSPCacheFetchErrorEvent, OCSPCacheHitEvent, OCSPCacheMissEvent, OCSPCacheUpdatehCompleteEvent, OCSPCacheUpdateNeededEvent, OCSPDiskCacheHitEvent, OCSPDiskCacheStoreEvent, OCSPMemoryCacheHitEvent, OCSPMemoryCacheStoreEvent, OCSPResponseRetrievedEvent, OCSPStapleReceivedEvent, OCSPVerificationFailedEvent, } from \"../common/Exports\";\nimport Agent from \"agent-base\";\n// @ts-ignore\nimport Cache from \"async-disk-cache\";\nimport HttpsProxyAgent from \"https-proxy-agent\";\nimport * as net from \"net\";\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\nexport class CertCheckAgent {\n    constructor(proxyInfo) {\n        if (!!proxyInfo) {\n            this.privProxyInfo = proxyInfo;\n        }\n        // Initialize this here to allow tests to set the env variable before the cache is constructed.\n        if (!CertCheckAgent.privDiskCache) {\n            CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", { supportBuffer: true, location: (typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT) ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined });\n        }\n    }\n    // Test hook to force the disk cache to be recreated.\n    static forceReinitDiskCache() {\n        CertCheckAgent.privDiskCache = undefined;\n        CertCheckAgent.privMemCache = {};\n    }\n    GetAgent(disableStapling) {\n        const agent = new Agent.Agent(this.CreateConnection);\n        if (this.privProxyInfo !== undefined &&\n            this.privProxyInfo.HostName !== undefined &&\n            this.privProxyInfo.Port > 0) {\n            const proxyName = \"privProxyInfo\";\n            agent[proxyName] = this.privProxyInfo;\n        }\n        return agent;\n    }\n    static GetProxyAgent(proxyInfo) {\n        const httpProxyOptions = {\n            host: proxyInfo.HostName,\n            port: proxyInfo.Port,\n        };\n        if (!!proxyInfo.UserName) {\n            httpProxyOptions.headers = {\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\"),\n            };\n        }\n        else {\n            httpProxyOptions.headers = {};\n        }\n        httpProxyOptions.headers.requestOCSP = \"true\";\n        const httpProxyAgent = new HttpsProxyAgent(httpProxyOptions);\n        return httpProxyAgent;\n    }\n    static OCSPCheck(socketPromise, proxyInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let ocspRequest;\n            let stapling;\n            let resolved = false;\n            const socket = yield socketPromise;\n            socket.cork();\n            const tlsSocket = socket;\n            return new Promise((resolve, reject) => {\n                socket.on(\"OCSPResponse\", (data) => {\n                    if (!!data) {\n                        this.onEvent(new OCSPStapleReceivedEvent());\n                        stapling = data;\n                    }\n                });\n                socket.on(\"error\", (error) => {\n                    if (!resolved) {\n                        resolved = true;\n                        socket.destroy();\n                        reject(error);\n                    }\n                });\n                tlsSocket.on(\"secure\", () => __awaiter(this, void 0, void 0, function* () {\n                    const peer = tlsSocket.getPeerCertificate(true);\n                    try {\n                        const issuer = yield this.GetIssuer(peer);\n                        // We always need a request to verify the response.\n                        ocspRequest = ocsp.request.generate(peer.raw, issuer.raw);\n                        // Do we have a result for this certificate in our memory cache?\n                        const sig = ocspRequest.id.toString(\"hex\");\n                        // Stapled response trumps cached response.\n                        if (!stapling) {\n                            const cacheEntry = yield CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\n                            stapling = cacheEntry;\n                        }\n                        yield this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\n                        socket.uncork();\n                        resolved = true;\n                        resolve(socket);\n                    }\n                    catch (e) {\n                        socket.destroy();\n                        resolved = true;\n                        reject(e);\n                    }\n                }));\n            });\n        });\n    }\n    static GetIssuer(peer) {\n        if (peer.issuerCertificate) {\n            return Promise.resolve(peer.issuerCertificate);\n        }\n        return new Promise((resolve, reject) => {\n            const ocspAgent = new ocsp.Agent({});\n            ocspAgent.fetchIssuer(peer, null, (error, value) => {\n                if (!!error) {\n                    reject(error);\n                    return;\n                }\n                resolve(value);\n            });\n        });\n    }\n    static GetResponseFromCache(signature, ocspRequest, proxyInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let cachedResponse = CertCheckAgent.privMemCache[signature];\n            if (!!cachedResponse) {\n                this.onEvent(new OCSPMemoryCacheHitEvent(signature));\n            }\n            // Do we have a result for this certificate on disk in %TMP%?\n            if (!cachedResponse) {\n                try {\n                    const diskCacheResponse = yield CertCheckAgent.privDiskCache.get(signature);\n                    if (!!diskCacheResponse.isCached) {\n                        CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\n                        CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\n                        cachedResponse = diskCacheResponse.value;\n                    }\n                }\n                catch (error) {\n                    cachedResponse = null;\n                }\n            }\n            if (!cachedResponse) {\n                return cachedResponse;\n            }\n            try {\n                const cachedOcspResponse = ocsp.utils.parseResponse(cachedResponse);\n                const tbsData = cachedOcspResponse.value.tbsResponseData;\n                if (tbsData.responses.length < 1) {\n                    this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\n                    return;\n                }\n                const cachedStartTime = tbsData.responses[0].thisUpdate;\n                const cachedNextTime = tbsData.responses[0].nextUpdate;\n                if (cachedNextTime < (Date.now() + this.testTimeOffset - 60000)) {\n                    // Cached entry has expired.\n                    this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\n                    cachedResponse = null;\n                }\n                else {\n                    // If we're within one day of the next update, or 50% of the way through the validity period,\n                    // background an update to the cache.\n                    const minUpdate = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\n                    if ((cachedNextTime - (Date.now() + this.testTimeOffset)) < minUpdate) {\n                        this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\n                        this.UpdateCache(ocspRequest, proxyInfo).catch((error) => {\n                            // Well, not much we can do here.\n                            this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\n                        });\n                    }\n                    else {\n                        this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\n                    }\n                }\n            }\n            catch (error) {\n                this.onEvent(new OCSPCacheFetchErrorEvent(signature, error));\n                cachedResponse = null;\n            }\n            if (!cachedResponse) {\n                this.onEvent(new OCSPCacheMissEvent(signature));\n            }\n            return cachedResponse;\n        });\n    }\n    static VerifyOCSPResponse(cacheValue, ocspRequest, proxyInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let ocspResponse = cacheValue;\n            const sig = ocspRequest.certID.toString(\"hex\");\n            // Do we have a valid response?\n            if (!ocspResponse) {\n                ocspResponse = yield CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\n            }\n            return new Promise((resolve, reject) => {\n                ocsp.verify({ request: ocspRequest, response: ocspResponse }, (error, result) => {\n                    if (!!error) {\n                        CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error));\n                        // Bad Cached Value? One more try without the cache.\n                        if (!!cacheValue) {\n                            this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(() => {\n                                resolve();\n                            }, (error) => {\n                                reject(error);\n                            });\n                        }\n                        else {\n                            reject(error);\n                        }\n                    }\n                    else {\n                        if (!cacheValue) {\n                            CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\n                        }\n                        resolve();\n                    }\n                });\n            });\n        });\n    }\n    static UpdateCache(req, proxyInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const signature = req.id.toString(\"hex\");\n            this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\n            const rawResponse = yield this.GetOCSPResponse(req, proxyInfo);\n            this.StoreCacheEntry(signature, rawResponse);\n            this.onEvent(new OCSPCacheUpdatehCompleteEvent(req.id.toString(\"hex\")));\n        });\n    }\n    static StoreCacheEntry(sig, rawResponse) {\n        this.StoreMemoryCacheEntry(sig, rawResponse);\n        this.StoreDiskCacheEntry(sig, rawResponse);\n    }\n    static StoreMemoryCacheEntry(sig, rawResponse) {\n        this.privMemCache[sig] = rawResponse;\n        this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\n    }\n    static StoreDiskCacheEntry(sig, rawResponse) {\n        this.privDiskCache.set(sig, rawResponse).then(() => {\n            this.onEvent(new OCSPDiskCacheStoreEvent(sig));\n        });\n    }\n    static GetOCSPResponse(req, proxyInfo) {\n        const ocspMethod = \"1.3.6.1.5.5.7.48.1\";\n        let options = {};\n        if (!!proxyInfo) {\n            const agent = CertCheckAgent.GetProxyAgent(proxyInfo);\n            options.agent = agent;\n        }\n        return new Promise((resolve, reject) => {\n            ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, (error, uri) => {\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                const parsedUri = parse.default(uri);\n                parsedUri.path = parsedUri.pathname;\n                options = Object.assign(Object.assign({}, options), parsedUri);\n                ocsp.utils.getResponse(options, req.data, (error, raw) => {\n                    if (error) {\n                        reject(error);\n                        return;\n                    }\n                    this.onEvent(new OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\n                    resolve(raw);\n                });\n            });\n        });\n    }\n    CreateConnection(request, options) {\n        const enableOCSP = (typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\") && options.secureEndpoint;\n        let socketPromise;\n        options = Object.assign(Object.assign({}, options), {\n            requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\n            servername: options.host\n        });\n        if (!!this.privProxyInfo) {\n            const httpProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\n            const baseAgent = httpProxyAgent;\n            socketPromise = new Promise((resolve, reject) => {\n                baseAgent.callback(request, options, (error, socket) => {\n                    if (!!error) {\n                        reject(error);\n                    }\n                    else {\n                        resolve(socket);\n                    }\n                });\n            });\n        }\n        else {\n            if (!!options.secureEndpoint) {\n                socketPromise = Promise.resolve(tls.connect(options));\n            }\n            else {\n                socketPromise = Promise.resolve(net.connect(options));\n            }\n        }\n        if (!!enableOCSP) {\n            return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\n        }\n        else {\n            return socketPromise;\n        }\n    }\n}\n// Test hook to enable forcing expiration / refresh to happen.\nCertCheckAgent.testTimeOffset = 0;\n// Test hook to disable stapling for cache testing.\nCertCheckAgent.forceDisableOCSPStapling = false;\n// An in memory cache for recived responses.\nCertCheckAgent.privMemCache = {};\nCertCheckAgent.onEvent = (event) => {\n    Events.instance.onEvent(event);\n};\n\n"]},"metadata":{},"sourceType":"module"}